<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${__property(my_csv)}</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">COLLECTION_NAME,SOLR_IP</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Static parameters" enabled="true">
        <stringProp name="filename">${__property(csv_staticParams)}</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">OFUSCATED_FILES_DIR</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(Threads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">400</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.univocity.parsers.csv.CsvParser;
import com.univocity.parsers.csv.CsvParserSettings;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.lang3.SerializationUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.AuthenticationException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.util.EntityUtils;
import org.apache.solr.client.solrj.impl.CloudSolrClient;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.SolrInputDocument;
import org.noggit.JSONUtil;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.conn.ssl.TrustAllStrategy;

import javax.net.ssl.SSLContext;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.zip.GZIPInputStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import groovy.transform.Field;


@Field final String  collectionName = vars.get(&quot;COLLECTION_NAME&quot;);
@Field  final String solrIPPort = vars.get(&quot;SOLR_IP&quot;);
//@Field final String solrIPPort = &quot;10.10.0.7:8983&quot;;
@Field final String requestType = &quot;JSON&quot;;
// protocol is used only for JSON and not JavaBIN
@Field  final String protocol = &quot;http&quot;;
//username &amp; password require only for https protocol and not for http
@Field final String username = &quot;solradmin&quot;;
@Field final String password = &quot;Zws8yR4G3hqubvnx1NHg20Vkp7IeKP&quot;;
//@Field  final String[] zkIPPort = [ &quot;10.10.0.28:2181&quot;, &quot;10.10.0.29:2181&quot; ];
@Field CloudSolrClient solrCloudClient;
@Field List&lt;File&gt; files;
@Field File folder;
@Field int filesCount;
@Field Random rand;
@Field CsvParser parser;
@Field int rowIndex;
@Field String bulkIDGUID;
@Field int rndNumber;
@Field ArrayList&lt;SolrInputDocument&gt; solrDocs = new ArrayList&lt;SolrInputDocument&gt;();
@Field SolrDocumentList solrDocs2 = new SolrDocumentList();
@Field String[] firstCSVRowSplit;
@Field int columnCount=0;
@Field int BULK_SIZE = 100;
@Field File rndFile;
@Field double fileSizeInKB;
@Field InputStream decompressed;
@Field  BufferedReader bufferReader;
@Field  String csvLineContent;
@Field HttpClient  client;
@Field HttpClient clientGet;
@Field HttpPost httpPost;
@Field HttpGet httpGet;
@Field String solrDocsJSON;


public void SolrJCloud() throws Exception{

	int bulkCount = 0;
	int numDocsCount = 0;
	
	
	initSolrClient();
	initSolrHTTPClientGet();

	try {
		initCSVParser();
		while(true) {
			try {
				bulkCount = 0;
				openParsingRandomFile();
				rowIndex = 0;
                    while ( (csvLineContent = bufferReader.readLine()) != null) {
					createSolrDoc();
					rowIndex++;
                         if (rowIndex % BULK_SIZE == 0) {
						solrCloudClient.add(collectionName, solrDocs);
						solrDocs.clear();
						bulkCount++;
                              log.info(&apos;BINARY update - File Name: &apos; + rndFile.getName() + &apos; ; Total Bulk count: &apos; + bulkCount + &apos; (bulk size: &apos; + BULK_SIZE + &apos;)&apos;);
						numDocsCount++;
						if (numDocsCount == 300) {
							numDocsCount = 0;
							getSolrMetricsNumDocs();
						}
					}
				}//While block (on all rows)

				if (decompressed != null) {
                        bufferReader.close();
                        decompressed.close();
                    }
			}//Internal Try block
			catch (Exception e) {
				log.error(&apos;In SolrJCloud() method - Exception message: &apos; + e.getMessage());
                    log.error(&apos;In SolrJCloud() method - Exception stackTrace: &apos; + e.getStackTrace()[0]);
                    log.error(&apos;In SolrJCloud() method - File Name: &apos; + rndFile.getName() + &apos; ; row number: &apos; + rowIndex + &apos; : Total Bulk count: &apos; + bulkCount + &apos; (bulk size: &apos; + BULK_SIZE + &apos;)&apos;);
				solrDocs.clear();
				if (decompressed != null) {
                        bufferReader.close();
                        decompressed.close();
                    }
				if(e.getClass().getCanonicalName() == &quot;com.univocity.parsers.common.TextParsingException&quot;) {
                        rndFile.delete();
                        log.error(&apos;Corrupted File Name: &apos; + rndFile.getName() + &apos; - deleted successfully&apos;);
                        setFilesList();
                    }
			}
		}//While block
	}//External Try block
	catch  (Exception e)  {
		System.err.println(e.getMessage());
	}
	finally{
		if (solrCloudClient != null) {
			solrCloudClient.close();
		}
	}
}

public void createSolrDoc(){
	int columnNumberIndex = 0;
	String[] csvRowSplit;
	SolrInputDocument solrDoc = new SolrInputDocument( );
	SolrInputDocument solrDocCopy ;
	String eventTimeString;
	SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
	Date eventTime;

	try {
            csvRowSplit = parser.parseLine(csvLineContent);
            columnCount = csvRowSplit.length;

            while (columnNumberIndex &lt; columnCount) {
                if (csvRowSplit[columnNumberIndex] != null) {
                    switch (firstCSVRowSplit[columnNumberIndex]) {
                        case &quot;unique_id&quot;:
                            //solrDoc.addField(firstCSVRowSplit[columnNumberIndex], UUID.randomUUID().toString());
                            break;
                        case &quot;Event_Time&quot;:
                            eventTimeString = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                            eventTime = formatter.parse(eventTimeString);
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                            break;
                        case &quot;Event_TimeUTC&quot;:
                            eventTimeString = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                            eventTime = formatter.parse(eventTimeString);
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                            break;
                        case &quot;Event_Time_Hour&quot;:
                            eventTimeString = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                            eventTime = formatter.parse(eventTimeString);
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                            break;
                        case &quot;Event_EventOnResource_Folder_CreateDate&quot;:
                            eventTimeString = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                            eventTime = formatter.parse(eventTimeString);
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                            break;
                        case &quot;Event_EventBy_AccountType_ID__Multivalue&quot;:
                            //solrDoc.addField(&quot;Event_EventBy_AccountType_ID&quot;, csvRowSplit[columnNumberIndex]);
                            break;
                        case &quot;Event_ID&quot;:
                            break;    
                       case &quot;Event_TicketEncryptionID&quot;:
             		        break;        
                        case &quot;Event_EventBy_LastLogonTime&quot;:
                            eventTimeString = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                            eventTime = formatter.parse(eventTimeString);
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                            break;
                        case &quot;Event_EventOnResource_Folder_AccessDate&quot;:
                            eventTimeString = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                            eventTime = formatter.parse(eventTimeString);
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                            break;
                         case &quot;Event_EventOnResource_Folder_ModifyDate&quot;:
                            eventTimeString = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                            eventTime = formatter.parse(eventTimeString);
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                            break;
                         case &quot;Event_EndTime&quot;:
                            eventTimeString = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                            eventTime = formatter.parse(eventTimeString);
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                            break;    
                        case &quot;Event_EventOnResource_Folder_Filer_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventBy_Type_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventOnResource_Folder_Filer_Platform_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventBy_SidID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventOnResource_Folder_DirID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_CollectionMethod_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventsCount&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_Type_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_Time_DayOfWeek_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_Status_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventOnResource_Folder_PathDepth&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_Operation_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventOnResource_ObjectType_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventBy_Domain_ID&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Integer.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventBy_IsStale&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Boolean.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventOnResource_Folder_IsFlagged&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Boolean.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventBy_IsFlagged&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Boolean.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventBy_IsDisabled&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Boolean.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_EventBy_HasExpirationDate&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Boolean.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        case &quot;Event_IsAlerted&quot;:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], Boolean.valueOf(csvRowSplit[columnNumberIndex]));
                            break;
                        default:
                            solrDoc.addField(firstCSVRowSplit[columnNumberIndex], csvRowSplit[columnNumberIndex]);
                            break;
                    }
                }
                columnNumberIndex++;
            }//While block (on all columns)
            //solrDoc.addField(&quot;documentType&quot;, &quot;EventLog&quot;);
            //solrDoc.addField(&quot;Document_Version&quot;, rndNumber);
            solrDoc.addField(&quot;unique_id&quot;, UUID.randomUUID().toString());
            solrDoc.addField(&quot;Document_Version&quot;, Integer.valueOf(rndNumber));
            solrDocCopy = solrDoc.deepCopy();
            solrDocs.add(solrDocCopy);
            solrDoc.clear();
     }
	catch (Exception e){
		log.error(&apos;In createSolrDoc() method - Exception message: &apos; + e.getMessage());
		log.error(&apos;In createSolrDoc() method - Exception stackTrace: &apos; + e.getStackTrace()[0]);
		log.error(&apos;In createSolrDoc() method - solrDoc content=&apos; + solrDoc.toString());
   }
}

public void initSolrHTTPClient() throws AuthenticationException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
	String solrURL = protocol + &quot;://&quot; + solrIPPort + &quot;/solr/&quot; + collectionName + &quot;/update/json/docs?wt=json&amp;commit=true&quot;;

	if (protocol == &quot;https&quot;) {
	  //require for https request with basic authentication of username and password
	  CredentialsProvider provider = new BasicCredentialsProvider();
	  UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);
	  provider.setCredentials(AuthScope.ANY, credentials);
	
	  //Configure the Apache HttpClient with “Accept All” SSL support. The goal is simple – consume HTTPS URLs which do not have valid certificates.
	  //final SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(null, (x509CertChain, authType) -&gt; true).build();
	  final SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(null, TrustAllStrategy.INSTANCE).build();
	  client = HttpClientBuilder.create().setDefaultCredentialsProvider(provider).setSSLContext(sslContext).setConnectionManager(new PoolingHttpClientConnectionManager(RegistryBuilder.&lt;ConnectionSocketFactory&gt;create().
	  register(&quot;http&quot;, PlainConnectionSocketFactory.INSTANCE).register(&quot;https&quot;, new SSLConnectionSocketFactory(sslContext,NoopHostnameVerifier.INSTANCE)).build())).build();
	} else {
	  client = HttpClientBuilder.create().build();
	}
	
	httpPost = new HttpPost(solrURL);
	httpPost.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);
	httpPost.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;);
}

public void initSolrHTTPClientGet() throws IOException {
	String solrURL = protocol + &quot;://&quot; + solrIPPort + &quot;/solr/admin/metrics?group=core&amp;prefix=SEARCHER.searcher.numDocs&quot;;
	//clientGet = HttpClientBuilder.create().build();
	httpGet = new HttpGet(solrURL);
	httpGet.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);
	httpGet.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;);
}

public void getSolrMetricsNumDocs() throws IOException {
	HttpResponse responseGet;
	HttpEntity entityGet;
	String responseString;
	
	
//	responseGet = clientGet.execute(httpGet);
	responseGet = client.execute(httpGet);
	entityGet = responseGet.getEntity();
	responseString = EntityUtils.toString(entityGet, &quot;UTF-8&quot;);
	String pattern = &quot;numDocs\&quot;:([0-9]*)}&quot;;
	Pattern r = Pattern.compile(pattern);
	Matcher matcher  = r.matcher(responseString);
	long num = 0;
	while (matcher.find()) {
	  num += Long.parseLong(matcher.group(1));
	}
	log.info(&apos;Total numDocs for cores = &apos; + num);
	EntityUtils.consume(entityGet);
}

public  void initSolrClient () {
	final List&lt;String&gt; zkServers = new ArrayList&lt;String&gt;();
	zkServers.add(zkIPPort[0]); //zkServers.add(zkIPPort[1]);
	solrCloudClient = new CloudSolrClient.Builder(zkServers, Optional.empty()).build();
}

public void openParsingRandomFile() throws Exception {
	rndNumber = rand.nextInt(filesCount);
	rndFile = files.get(rndNumber);
	fileSizeInKB = rndFile.length() / 1024;
	decompressed = new GZIPInputStream(new FileInputStream(rndFile));
	bufferReader = new BufferedReader(new InputStreamReader(decompressed));
	firstCSVRowSplit = parser.parseLine(bufferReader.readLine());
	
	while ((fileSizeInKB &lt; 200) || (StringUtils.isBlank(firstCSVRowSplit.toString()))){
		log.info(&apos;File size(KB): &apos; + fileSizeInKB + &apos; is too small or not valid, randomize a new one&apos;);
		rndNumber = rand.nextInt(filesCount);
		rndFile = files.get(rndNumber);
		fileSizeInKB = rndFile.length() / 1024;
		decompressed = new GZIPInputStream(new FileInputStream(rndFile));
		bufferReader = new BufferedReader(new InputStreamReader(decompressed));
		firstCSVRowSplit = parser.parseLine(bufferReader.readLine());
	}
}

public void initCSVParser() throws Exception {
	CsvParserSettings parserSettings;
	char c = &apos;\&apos;&apos;;
	final String[] fieldsToInclude = [ &quot;unique_id&quot;, &quot;Event_Status_ID&quot;, &quot;Event_EventBy_DistinguishedName&quot;,&quot;Event_EventBy_Domain_ID&quot;, &quot;Event_EventBy_Domain_Name&quot;, &quot;Event_EventBy_IsDisabled&quot;,&quot;Event_EventBy_IsStale&quot;, &quot;Event_EventBy_LastLogonTime&quot;, &quot;Event_EventBy_Name&quot;,&quot;Event_EventBy_SamAccountName&quot;, &quot;Event_EventBy_SidID&quot;, &quot;Event_EventBy_Type_ID&quot;,&quot;Event_EventOnResource_Folder_DirID&quot;, &quot;Event_EventOnResource_Folder_DirID__Idx&quot;, &quot;Event_EventOnResource_Folder_Filer_ID&quot;,&quot;Event_EventOnResource_Folder_Filer_Name&quot;, &quot;Event_EventOnResource_Folder_IsSensitive&quot;, &quot;Event_EventOnResource_Folder_Path&quot;,&quot;Event_EventOnResource_Folder_TotalHitCount&quot;, &quot;Event_EventOnResource_ObjectType_ID&quot;, &quot;Event_EventOnVaronisOwnerNamesAggregate&quot;,&quot;Event_EventsCount&quot;, &quot;Event_File_Type&quot;, &quot;Event_File_Name&quot;, &quot;Event_IsAlerted&quot;,&quot;Event_Operation_ID&quot;, &quot;Event_Time&quot;, &quot;Event_TimeUTC&quot;,&quot;Event_Type_ID&quot;, &quot;Event_ID&quot;, &quot;Event_EventOnObjectName&quot;,&quot;Event_EventBy_AccountType_ID__Multivalue&quot;, &quot;Event_EventOnResource_Folder_IsFlagged&quot;, &quot;Event_EventBy_IsFlagged&quot;,&quot;Event_Location_BlacklistedLocation&quot;, &quot;Event_EventBy_UPN&quot;, &quot;Event_Time_Hour&quot;,&quot;Event_Time_DayOfWeek_ID&quot;, &quot;Event_EventBy_HasExpirationDate&quot;,&quot;Event_EventBy_IsLockout&quot;, &quot;Event_EventOnResource_Folder_CreateDate&quot;, &quot;Event_EventOnResource_Folder_PathDepth&quot; , &quot;Event_CollectionMethod_ID&quot;, &quot;Event_EventOnResource_Folder_Filer_Platform_ID&quot;, &quot;Event_Description&quot;, &quot;Event_DeviceName&quot;, &quot;Event_EventBy_Department&quot;, &quot;Event_EventBy_Manager_Name&quot;, &quot;Event_EventBy_Manager_SidID&quot;, &quot;Event_EventOnResource_Folder_AccessDate&quot;, &quot;Event_EventOnResource_Folder_FSOwner_Name&quot;, &quot;Event_EventOnResource_Folder_FSOwner_SidID&quot;, &quot;Event_EventOnResource_Folder_ModifyDate&quot;, &quot;Event_IP&quot;, &quot;Event_EventBy_MemberOfGroup_SidID&quot;, &quot;Event_Destination_DeviceName&quot;, &quot;Event_Destination_IP&quot;, &quot;Event_Destination_Domain&quot;, &quot;Event_Destination_URL_Address&quot;, &quot;Event_EndTime&quot;, &quot;Event_Device_UserAgent&quot;, &quot;Event_CorrelationId&quot;, &quot;Event_EventOnResource_Folder_NumberOfNestedFiles&quot;, &quot;Event_EventOnResource_Folder_SizeFolder&quot;, &quot;Event_EventOnResource_Folder_SizeFolderAndSubFolders&quot;, &quot;Event_EventBy_PasswordStatus_ID&quot;, &quot;Event_CollectionDeviceHostname&quot;];


	def ofuscatedFilesDir = vars.get(&quot;OFUSCATED_FILES_DIR&quot;);
	
	//folder = new File(&quot;C:\\Ofuscated2&quot;);
	folder = new File(ofuscatedFilesDir);
	rand = new Random();
	parserSettings = new CsvParserSettings();
	parserSettings.selectFields(fieldsToInclude);
	parserSettings.getFormat().setQuoteEscape(c);
	parser = new CsvParser(parserSettings);
	
	setFilesList();
}

public void setFilesList() throws Exception {
	//Getting only files and not folder
	files = (List&lt;File&gt;) FileUtils.listFiles(folder, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);
	filesCount = files.size();
}

public void SolrHTTP() throws ClientProtocolException, IOException, AuthenticationException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
   int bulkCount = 0;
   int numDocsCount = 0;
   HttpResponse response2;
   StringEntity entity;
   HttpEntity entity2;


   initSolrHTTPClient();
   initSolrHTTPClientGet();

   try {
       initCSVParser();
       while(true) {
	  try {
			bulkCount = 0;
			openParsingRandomFile();
			rowIndex = 0;
			while ( (csvLineContent = bufferReader.readLine()) != null) {
                   createSolrDocJSON();
                   rowIndex++;

				if (rowIndex % BULK_SIZE == 0) {
                       solrDocsJSON = JSONUtil.toJSON(solrDocs2);
                       entity = new StringEntity(solrDocsJSON);
                       httpPost.setEntity(entity);
                       response2 = client.execute(httpPost);
                       entity2 = response2.getEntity();
                       //in order to use connection for next requests, closing the content stream will attempt to keep the underlying connection alive by consuming the entity content
                       EntityUtils.consume(entity2);
                       solrDocs2.clear();
                       bulkCount++;
				   log.info(&apos;JSON update - File Name: &apos; + rndFile.getName() + &apos; ; row number: &apos; + rowIndex + &apos; : Total Bulk count: &apos; + bulkCount + &apos; (bulk size: &apos; + BULK_SIZE + &apos;)&apos;);
                       numDocsCount++;
                       if (numDocsCount == 300) {
                           numDocsCount = 0;
                           getSolrMetricsNumDocs();
                       }
                   }
               }//While block (on all rows)

               if (decompressed != null)
                   decompressed.close();
           }//Internal Try block
           catch (Exception e) {
			log.error(e.getMessage());
			log.error(&apos;File Name: &apos; + rndFile.getName() + &apos; ; row number: &apos; + rowIndex + &apos; : Total Bulk count: &apos; + bulkCount + &apos; (optional bulk size: &apos; + BULK_SIZE + &apos;)&apos;);
			solrDocs2.clear();
			if(e.getClass().getCanonicalName() == &quot;com.univocity.parsers.common.TextParsingException&quot;) {
			    rndFile.delete();
			    log.error(&apos;Corrupted File Name: &apos; + rndFile.getName() + &apos; - deleted successfully&apos;);
			    setFilesList();
			}
           }
       }//While block
   }//External Try block
   catch  (Exception e)  {
       System.err.println(e.getMessage());
   }
   finally{
       if (client != null) {
           httpPost.releaseConnection();
       }
   }
}

public void createSolrDocJSON() throws IOException{

   int columnNumberIndex = 0;
   String[] csvRowSplit;
   SolrDocument solrDoc2 = new SolrDocument( );
   SolrDocument solrDocCopy2;
   String eventTime;

   try {
	  csvRowSplit = parser.parseLine(csvLineContent);
       columnCount = csvRowSplit.length;

       while (columnNumberIndex &lt; columnCount) {
		if (csvRowSplit[columnNumberIndex] != null) {
               switch (firstCSVRowSplit[columnNumberIndex]) {
                   case &quot;unique_id&quot;:
                       //solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], UUID.randomUUID().toString());
                       break;
                   case &quot;Event_Time&quot;:
                       eventTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                       break;
                   case &quot;Event_TimeUTC&quot;:
                       eventTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                       break;
                   case &quot;Event_Time_Hour&quot;:
                       eventTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                       break;
                   case &quot;Event_EventOnResource_Folder_CreateDate&quot;:
                       eventTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                       break;
                   case &quot;Event_EventBy_AccountType_ID__Multivalue&quot;:
                       //solrDoc.addField(&quot;Event_EventBy_AccountType_ID&quot;, csvRowSplit[columnNumberIndex]);
                       break;
                   case &quot;Event_ID&quot;:
                       break;
                   case &quot;Event_EventBy_LastLogonTime&quot;:
                       eventTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                       break;
                    case &quot;Event_EventOnResource_Folder_AccessDate&quot;:
                       eventTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                       break;
                    case &quot;Event_EventOnResource_Folder_ModifyDate&quot;:
                       eventTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                       break;
                    case &quot;Event_EndTime&quot;:
                       eventTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).toString();
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], eventTime);
                       break;
                    case &quot;Event_ID&quot;:
                            break;    
                   default:
                       solrDoc2.addField(firstCSVRowSplit[columnNumberIndex], csvRowSplit[columnNumberIndex]);
                       break;
               }
           }
           columnNumberIndex++;
       }//While block (on all columns)
       //solrDoc2.addField(&quot;documentType&quot;, &quot;EventLog&quot;);
       if (rowIndex % BULK_SIZE == 0) {
       	bulkIDGUID = UUID.randomUUID().toString();
       }
       //solrDoc2.addField(&quot;Bulk_ID&quot;, bulkIDGUID);
       solrDoc2.addField(&quot;unique_id&quot;, UUID.randomUUID().toString());
       solrDoc2.addField(&quot;Document_Version&quot;, rndNumber);

       //Deep copy object to object
       solrDocCopy2 = SerializationUtils.clone(solrDoc2);
       solrDocs2.add(solrDocCopy2);
       solrDoc2.clear();
   }
   catch (Exception e){
       log.error(e.getMessage());
       log.error(solrDoc2.toString());
   }
}

if (requestType == &quot;BINARY&quot;)
	SolrJCloud();

if (requestType == &quot;JSON&quot;)
	SolrHTTP();



</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
